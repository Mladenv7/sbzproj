package com.sbz;
import com.sbz.proj.model.*;
import com.sbz.proj.model.events.*;

import java.util.List;
import java.util.Date;

global java.util.logging.Logger LOGGER


declare BluffingEvent
    @role(event)
end

declare BluffingPreventEvent
    @role(event)
end

rule "Call with high cards"
	lock-on-active true
	agenda-group "pre-flop"
	when
        $state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank != $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank >= 25,
							$players : players
							)
		accumulate( Player($pot : getMoney(), $action : getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players, 
			$maxMoney : max($pot), $raiseCount : count($action); $raiseCount > 0)
		Player(moneyRatio($maxMoney.doubleValue()) <= 2) from $player
    then
        modify($state) { getPlayers().get(0).getAction().set(0, Action.CALL) }
		insert(Action.CALL);
		System.out.println("You should call to "+ $maxMoney);
		delete($state);  
end

rule "Backing off from raise with low cards"
	lock-on-active true
	agenda-group "pre-flop"
	when
		$state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank != $player.getCard2().rank.rank,
							$player.getCard1().suit.rank != $player.getCard2().suit.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank < 11,
							$players : players
							)
		Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players		
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.FOLD) }
		insert(Action.FOLD);
		insert(new ActionInsertEvent(new Date(), Action.FOLD));
		delete($state);
        System.out.println("You should fold");
end


rule "Backing off from raise with high cards"
	lock-on-active true
	agenda-group "pre-flop"
	when
		$state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank != $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank >= 25,
							$players : players
							)
		accumulate( Player($pot : getMoney(), $action : getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players, 
			$maxMoney : max($pot), $raiseCount : count($action); $raiseCount > 0)
		Player(moneyRatio($maxMoney.doubleValue()) > 2) from $player
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.FOLD) }
		insert(Action.FOLD);
		insert(new ActionInsertEvent(new Date(), Action.FOLD));
		delete($state);
        System.out.println("You should fold");
end


rule "Raise with high cards"
    lock-on-active true
	agenda-group "pre-flop"
	when
        $state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank != $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank >= 25,
							$players : players
							)
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players)
    then
        modify($state) { getPlayers().get(0).getAction().set(0, Action.RAISE) }
		insert(Action.RAISE);
		delete($state);
        System.out.println("You should raise");
end


rule "Raising with good pocket pair"
	lock-on-active true
	agenda-group "pre-flop"
    when
		$state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank == $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank >= 18
							)
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.RAISE) }
		insert(Action.RAISE);
		delete($state);
        System.out.println("You should raise");
end


rule "Raising with lower pocket pair"
	lock-on-active true
	agenda-group "pre-flop"
    when
		$state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank == $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank < 18,
							$players : players
							)
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players)
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.RAISE) }
		insert(Action.RAISE);
		delete($state);
        System.out.println("You should raise");
end

rule "Check with mediocre cards"
	lock-on-active true
	agenda-group "pre-flop"
	when
		$state : TableState(
							$player : players.get(0),
							$player.getCard1().rank.rank != $player.getCard2().rank.rank,
							$player.getCard1().rank.rank + $player.getCard2().rank.rank < 16,
							$players : players
							)
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players)
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.CHECK) }
		insert(Action.CHECK);
		delete($state);
        System.out.println("You should check");
end


rule "Check when no one else raised"
	lock-on-active true
	agenda-group "pre-flop"
	when
		$state : TableState(
							$player : players.get(0),
							$players : players
							)
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players)
	then
		modify($state) { getPlayers().get(0).getAction().set(0, Action.CHECK) }
		insert(Action.CHECK);
		delete($state);
        System.out.println("You should check");
end




rule "Bluffing"
	no-loop 
	agenda-group "pre-flop"
	when
		$pflopEvent : StageEvent(stageName == StageName.PRE_FLOP)
		$a1: ActionInsertEvent()
        Number(intValue >= 3) from accumulate(
            $a2: ActionInsertEvent(
                this != $a1, 
                action == Action.FOLD, 
                this meets[10m] $a1
            ),
            count($a2)
        )
		$actions: List() from collect(ActionInsertEvent())
		$otherPFlopEvents: List() from collect(StageEvent(stageName == StageName.PRE_FLOP))
	then
		System.out.println("You were folding often, you should try to bluff now.");
		insert(Action.RAISE);
		insert(new BluffingEvent());
		delete($actions.get(0));
		delete($actions.get(1));
		delete($actions.get(2));
		delete($actions.get(3));
		delete($otherPFlopEvents.get(0));
		delete($otherPFlopEvents.get(1));
		delete($otherPFlopEvents.get(2));
		delete($otherPFlopEvents.get(3));
end

rule "Bluff prevent"
	no-loop
	agenda-group "pre-flop"
	when
		$b1 : BluffingEvent()
		$b2 : BluffingEvent(this != $b1, this meets[2m] $b1)
	then
		insert(new BluffingPreventEvent());
		insert(Action.FOLD);
		delete($b1);
		delete($b2);
end


rule "Safety net pre flop"
	lock-on-active true
	agenda-group "pre-flop"
	salience -20
	when
        $state : TableState($player : players.get(0))
    then
        modify($state) { getPlayers().get(0).getAction().set(0, Action.CALL) }
		insert(Action.CALL);
		System.out.println("You should call");
		delete($state);  
end