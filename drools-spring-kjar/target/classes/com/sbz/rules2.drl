package com.sbz;

import com.sbz.proj.model.*;
import java.util.ArrayList;

global java.util.logging.Logger LOGGER

rule "HIGH_CARD"
    lock-on-active true
    agenda-group "possibility"
    salience -20
	when
        $possibility: Possibility(
            pokerHand == PokerHand.UNKNOWN,
            howManyWithRank(card1.rank) == 1,
            howManyWithRank(card2.rank) == 1,
            howManyWithRank(card3.rank) == 1,
            howManyWithRank(card4.rank) == 1,
            howManyWithRank(card5.rank) == 1,
            sameSuit() == false,
            $pokerHand: pokerHand != PokerHand.STRAIGHT
        )
    then
        modify($possibility){pokerHand = PokerHand.HIGH_CARD}
end

rule "All possibilities classified - jump to river"
    no-loop
    agenda-group "possibility"
	when
	    $state: TableState($stage: currentStage == StageName.RIVER)
        $possibilities: ArrayList(size == 21) from collect(Possibility(pokerHand != PokerHand.UNKNOWN))
        accumulate(Possibility($strength : pokerHand.strength, $cards: getCards()), $bestHand : max($strength))
        $best: Possibility(pokerHand.strength == $bestHand)
    then
        $best.best = true;
        update($best);

        System.out.println($best.getCards());
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("river").setFocus();
end

rule "All possibilities classified - jump to turn"
    agenda-group "possibility"
	when
	    $state: TableState($stage: currentStage == StageName.TURN)
        $possibilities: ArrayList(size == 6) from collect(Possibility(pokerHand != PokerHand.UNKNOWN))
        accumulate(Possibility($strength : pokerHand.strength, $cards: getCards()), $bestHand : max($strength))
        $best: Possibility(pokerHand.strength == $bestHand)
    then
        //for (Object p : $possibilities){
           //           delete(p);
         //         }

        $best.best = true;
        update($best);

        System.out.println($best.getCards());

        //insert($best);
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn").setFocus();
end

rule "Possibility classified - jump to flop"
    no-loop
    agenda-group "possibility"
	when
	    $state: TableState($stage: currentStage == StageName.FLOP)
        $possibilities: ArrayList(size == 1) from collect(Possibility(pokerHand != PokerHand.UNKNOWN))
        accumulate(Possibility($strength : pokerHand.strength, $cards: getCards()), $bestHand : max($strength))
        $best: Possibility(pokerHand.strength == $bestHand)
    then
        $best.best = true;
        update($best);

        System.out.println($best.getCards());
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("flop").setFocus();
end