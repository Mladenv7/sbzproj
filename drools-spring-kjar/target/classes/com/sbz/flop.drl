package com.sbz;

import com.sbz.proj.model.*;

global java.util.logging.Logger LOGGER


declare BluffingEvent
    @role(event)
    action : Action
end


rule "Raise when you have royal flush"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0)
        )
        $possibility: Possibility(
            $pokerHand: pokerHand == PokerHand.ROYAL_FLUSH, best == true
        )
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.RAISE);
        }
		insert(Action.RAISE);
		delete($possibility);
		delete($state);
end

rule "Raise when you have good combination"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0)
        )
        $possibility: Possibility(
            pokerHand != PokerHand.ROYAL_FLUSH,
            $pokerHand: pokerHand,
            pokerHand.strength >= 4,
			best == true
        )
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.RAISE);
        }
		insert(Action.RAISE);
		LOGGER.info("You have " + $pokerHand.name());
		delete($possibility);
		delete($state); 
end

rule "Call when you have ok combination"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0)
        )
        $possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
            pokerHand.strength < 4,
            pokerHand.strength > 1
        )
        Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players
        accumulate( Player($pot : getMoney()) from $players, $maxMoney : max($pot))
        Player(moneyRatio($maxMoney.doubleValue()) <= 2) from $player
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.CALL);
        }
		insert(Action.CALL);
		LOGGER.info("You have " + $pokerHand.name());
        LOGGER.info("You should call to "+ $maxMoney);
		delete($possibility);
		delete($state);
end

rule "Call when you have only strong pocket pair"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0),
            $player.getCard1().rank.rank == $player.getCard2().rank.rank,
            $player.getCard1().rank.rank + $player.getCard2().rank.rank >= 18
        )
        $possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
            pokerHand == PokerHand.PAIR
        )
        Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players
        accumulate( Player($pot : getMoney()) from $players, $maxMoney : max($pot))
        Player(moneyRatio($maxMoney.doubleValue()) <= 2) from $player
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.CALL);
        }
		insert(Action.CALL);
		LOGGER.info("You have " + $pokerHand.name());
        LOGGER.info("You should call to "+ $maxMoney);
		delete($possibility);
		delete($state);
end

rule "Call when you have only weak pocket pair and someone's pot is not 2 times bigger than yours"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0),
            $player.getCard1().rank.rank == $player.getCard2().rank.rank
        )
        $possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
            pokerHand == PokerHand.PAIR
        )
        Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players
        accumulate( Player($pot : getMoney()) from $players, $maxMoney : max($pot))
        Player(moneyRatio($maxMoney.doubleValue()) <= 2) from $player
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.CALL);
        }
		insert(Action.CALL);
		LOGGER.info("You have " + $pokerHand.name());
        LOGGER.info("You should call to "+ $maxMoney);
		delete($possibility);
		delete($state);
end

rule "Call when you have nothing and someone's pot is not 2 times bigger than yours"
    lock-on-active true
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0),
            players.get(0).getCard1().rank.rank >= 12 || players.get(0).getCard2().rank.rank >= 12
        )
        $possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
            pokerHand.strength <= 1
        )
        Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players
        accumulate( Player($pot : getMoney()) from $players, $maxMoney : max($pot))
        Player(moneyRatio($maxMoney.doubleValue()) <= 2) from $player
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.CALL);
        }
		insert(Action.CALL);
		LOGGER.info("You have " + $pokerHand.name());
        LOGGER.info("You should call to "+ $maxMoney);
		delete($possibility);
		delete($state);   
end

rule "Fold when you have nothing"
    agenda-group "flop"
	when
        $state: TableState(
            $players: players,
            $player: players.get(0)
        )
        $possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
			$pokerHand == PokerHand.HIGH_CARD || $pokerHand == PokerHand.UNKNOWN
        )
    then
        modify($state){
            getPlayers().get(0).getAction().set(0, Action.FOLD);
        }
		insert(Action.FOLD);
		insert(new ActionInsertEvent(new Date(), Action.FOLD));
		LOGGER.info("You have " + $pokerHand.name());
		delete($possibility);
		delete($state);
        
end

rule "No one raised, check with an ok hand"
	agenda-group "flop"
	when
		$state : TableState(
			$players: players,
            $player: players.get(0)
		)
		$possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
			$pokerHand.strength <= 4
        )
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players) 
	then
		modify($state){
            getPlayers().get(0).getAction().set(0, Action.CHECK);
        }
		insert(Action.CHECK);
		insert(new ActionInsertEvent(new Date(), Action.CHECK));
		LOGGER.info("You have " + $pokerHand.name()+ " on flop, you should check");
		delete($possibility);
		delete($state);
end


rule "No one raised, raise with a good hand"
	agenda-group "flop"
	when
		$state : TableState(
			$players: players,
            $player: players.get(0)
		)
		$possibility: Possibility(
            $pokerHand: pokerHand,
			best == true,
			$pokerHand.strength > 4
        )
		not(Player(getAction().get(0) == Action.RAISE || getAction().get(0) == Action.BET) from $players) 
	then
		modify($state){
            getPlayers().get(0).getAction().set(0, Action.RAISE);
        }
		insert(Action.RAISE);
		LOGGER.info("You have " + $pokerHand.name()+ " on flop, you should raise");
		delete($possibility);
		delete($state);  
end


rule "Bluffing in flop"
	no-loop 
	agenda-group "flop"
	when
		$flopEvent : StageEvent(stageName == StageName.FLOP)
		$a1: ActionInsertEvent()
        Number(intValue >= 3) from accumulate(
            $a2: ActionInsertEvent(
                this != $a1, 
                action == Action.FOLD || action == Action.CHECK, 
                this meets[10m] $a1
            ),
            count($a2)
        )
		$actions: List() from collect(ActionInsertEvent())
		$otherFlopEvents: List() from collect(StageEvent(stageName == StageName.FLOP))
	then
		System.out.println("You were playing defensively often, you should try to bluff now.");
		insert(Action.RAISE);
		insert(new BluffingEvent(Action.RAISE));
		delete($actions.get(0));
		delete($actions.get(1));
		delete($actions.get(2));
		delete($actions.get(3));
		System.out.println($otherFlopEvents.size());
		delete($otherFlopEvents.get(0));
		delete($otherFlopEvents.get(1));
		delete($otherFlopEvents.get(2));
		delete($otherFlopEvents.get(3));
end
